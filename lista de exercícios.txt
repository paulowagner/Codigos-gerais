--questão 1:
	OP:	MNEMÔNICO	CONDIÇÃO DE SALTO
	70 	JO		OF = 1
	71 	JNO		OF = 0
	72 	JC JB JNAE	CF = 1
	73 	JNC JNB JAE	CF = 0
	74 	JZ JE		ZF = 0
	75 	JNZ JNE		ZF = 1
	76 	JNA JBE		CF = 1 || ZF = 1
	77 	JA JNBE		CF = 0 && ZF = 0
	78 	JS		SF = 1
	79 	JNS		SF = 0
	7A 	JP JPE		PF = 1
	7B 	JNP JPO		PF = 0
	7C 	JL JNGE		SF != OF
	7D 	JGE JNL		SF = OF
	7E 	JLE JNG		(ZF != OF) || (SF != OF)
	7F 	JG JNLE		(ZF = 0) && (SF = SF)


--questão 2:

	cmp cx,dx
	ja ok
erro:
ok:	div cx


--questão 3:

a)
abs:	PUSH EBP
	MOV EBP,ESP
	MOV AX,[EBP+8]
	NEG AX
	POP EBP
	RET

b)
toupper:	PUSH EBP
		MOV EBP,ESP
		MOV AX,[EBP+8]
		CMP AX,61
		JB fim
		CMP AX,7A
		JA fim
		ADD AX,20
fim:		POP EBP
		RET

	
c)
strtoul:
	PUSH EBP
	MOV EBP,ESP



d)
memset:	PUSH EBP
	MOV EBP,ESP
	PUSH EAX
	PUSH ECX
	PUSH EBX
	MOV AL,[EBP+12]
	MOV ECX,[EBP+16]
	MOV EBX,[EBP+8]
	DEC ECX
l1:	MOV [EBP+ECX]
	LOOP l1
	POP EBX
	POP ECX
	POP EAX
	POP EBP
	RET


e)
strlen:	PUSH EBP
	MOV EBP,ESP
	PUSH EBX
	MOV EBX,[EBP+8]
	XOR AX,AX
VOLTA:	CMP BYTE PTR [EBX],0
	JE FIM
	INC AX
	JMP VOLTA
FIM:	POP EBX
	POP EBP
	RET


f)
strcpy:	PUSH EBP
	MOV EBP,ESP
	PUSH EBX
	PUSH ESI
	PUSH ECX
	MOV EBX,[EBP+12]
	MOV EAX,[EBP+8]
	XOR ESI,ESI
VOLTA:	MOV CL,[EBX+ESI]
	MOV [EAX+ESI],CL
	CMP CL,0
	JE FIM
	INC ESI
	JMP VOLTA
FIM:	POP ECX
	POP ESI
	POP EBX
	POP EBP
	RET

g)
strcat:	PUSH EBP
	MOV EBP,ESP
	PUSH EBX
	PUSH ESI
	PUSH ECX
	MOV EBX,[EBP+12]
	MOV EAX,[EBP+8]
	PUSH EAX
	XOR ESI,ESI
L1:	CMP [EAX],0
	JNE L1
L2:	MOV CL,[EBX+SI]
	MOV [EAX+SI],CL
	CMP CL,0
	JE FIM
	INC ESI
	JMP L2
FIM:	POP EAX
	POP ECX
	POP ESI
	POP EBX
	POP EBP
	RET

h)
strcmp:	PUSH EBP
	MOV EBP,ESP
	PUSH EBX
	PUSH EDX
	PUSH ESI
	MOV EBX,[EBP+12]
	MOV EDX,[EBP+8]
	XOR EAX,EAX
	XOR ESI,ESI
VOLTA:	MOV AL,[EDX+ESI]
	SUB AL,[EBX+ESI]
	JNZ FIM
	CMP AL,0
	JZ FIM
	INC ESI
	JMP VOLTA
FIM:	POP ESI
	POP EDX
	POP EBX
	POP EBP
	RET

i)
strchr:	PUSH EBP
	MOV EBP,ESP
	PUSH EBX
	MOV EAx,[EBP+8]
	MOV EBX,[EBP+12]
VOLTA:	CMP BL,[EAX]
	JE FIM
	CMP BH,[EAX]
	JZ FIMN
	INC EAX
	JMP VOLTA
FIMN:	XOR EAX,EAX
FIM:	POP EBX
	POP EBP
	RET


j)
strstr:	PUSH EBP
	MOV EBP,ESP
	PUSH EBX
	PUSH ESI
	PUSH EDX
	MOV EAX,[EBP+8]
	MOV EBX,[EBP+12]
	
PROX:	CMP BYTE PTR [EAX],0
	JNZ BUSCA
	MOV EAX,0
	JMP FIM

BUSCA:	MOV DL,[EAX]
	INC EAX
	CMP DL,[EBX]
	JNZ PROX

PERC:	CMP BYTE PTR [EBX+ESI],0
	JE FIM
	INC ESI
	MOV DL,[EAX+ESI]
	CMP DL,[EBX+ESI]
	JE PERC
	INC EAX
	XOR ESI,ESI
	JMP PROX

FIM:	PUSH EDX
	PUSH ESI
	PUSH EBX
	PUSH EBP
	RET


--questão 4:
a)
int bisxt(int ano);

bisxt:	PUSH EBP
	PUSH EDX
	PUSH ECX
	MOV EBP,ESP
	MOV EAX,[EBP+8]
	MOV ECX,4
	XOR EDX,EDX
	DIV ECX
	CMP EDX,0
	JNE FIMS
	MOV ECX,100
	XOR EDX,EDX
	DIV ECX
	CMP EDX,0
	JNE FIMS
	MOV ECX,400
	XOR EDX,EDX
	DIV ECX
	CMP EDX,0
	JZ FIMS
	MOV EAX,0
	JMP FIM
FIMS:	MOV EAX,1
	POP ECX
	POP EDX
	POP EBP
	RET

b)
int primo(int n);

primo:	PUSH EBP
	MOV EBP,ESP
	PUSH ECX
	PUSH EDX
	MOV EAX,[EBP+8]
	CMP EAX,2
	JB NPRIMO
	MOV ECX,EAX
	DEC ECX
	CMP ECX,1
	JBE FIM
	XOR EDX,EDX
	DIV ECX
	CMP EDX,0
	JE NPRIMO
FIM:	MOV EAX,1
	JMP PULA
NPRIMO:	MOV EAX,0
PULA:	POP EDX
	POP ECX
	POP EBP
	RET




--questão 5:

9C
CD 16
CC
FE 4C F8
42
86 2B
00 00
29 D1
81 76 00 75 01
E